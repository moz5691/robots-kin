name: CICD

on: [push]

env:
  IMAGE: docker.pkg.github.com/$(echo $GITHUB_REPOSITORY | tr '[A-Z]' '[a-z]')/robots-tracker
  GIT_TAG: v0.1.2

jobs:

  build:
    name: Build Docker Img
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2.4.0
        with:
          ref: main
      - name: Log in to Github Packages
        run: echo ${GITHUB_TOKEN} | docker login -u ${GITHUB_ACTOR} --password-stdin docker.pkg.github.com
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Pull image
        run: |
          docker pull ${{ env.IMAGE }}:latest || true
      - name: Build image
        run: |
          docker build \
            --cache-from ${{ env.IMAGE }}:latest \
            --tag ${{ env.IMAGE }}:latest \
            --file ./Dockerfile.prod \
            "."
      - name: Push image
        run: |
          docker push ${{ env.IMAGE }}:latest

  test:
    name: Test Docker image
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v2.4.0
        with:
          ref: main
      - name: Log in to Github Pkg
        run: echo ${GITHUB_TOKEN} | docker login -u ${GITHUB_ACTOR} --password-stdin docker.pkg.github.com
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Pull Docker image
        run: |
          docker pull ${{ env.IMAGE }}:latest || true
      - name: Build Docker image
        run: |
          docker build \
            --cache-from ${{ env.IMAGE }}:latest \
            --tag ${{ env.IMAGE }}:latest \
            --file ./Dockerfile.prod \
            "."
      - name: Run Docker container
        run: |
          docker run -d \
            --name robots-kin \
            -e PORT=8765 \
            -e ENVIRONMENT=dev \
            -e DATABASE_URL=sqlite://sqlite.db \
            -e DATABASE_TEST_URL=sqlite://sqlite.db \
            -p 5003:8765 \
            ${{ env.IMAGE }}:latest
      - name: Tests
        run: |
          docker exec robots-kin python -m pytest .
      - name: Linting check
        run: |
          docker exec robots-kin python -m flake8 .
      - name: Formatting check
        run: |
          docker exec robots-kin python -m black . --check
      - name: Import Sorting check
        run: |
          docker exec robots-kin python -m isort . --check-only

  deploy:
    name: Deploy to GCR
    runs-on: ubuntu-latest
    needs: [build, test]
    env:
      PROJECT_ID: enhanced-mote-341203
      IMAGE_NAME: robots-tracker
    steps:
      - name: Checkout
        uses: actions/checkout@v2.4.0
        with:
          ref: main
      - name: Log in to Github Pkg
        run: echo ${GITHUB_TOKEN} | docker login -u ${GITHUB_ACTOR} --password-stdin docker.pkg.github.com
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Pull Docker image
        run: |
          docker pull ${{ env.IMAGE }}:latest || true
      - name: Build Docker image
        run: |
          docker build \
            --cache-from ${{ env.IMAGE }}:latest \
            --tag ${{ env.IMAGE }}:latest \
            --file ./Dockerfile.prod \
            "."
      - uses: google-github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.SERVICE_ACCOUNT_KEY }}
          project_id: ${{ env.PROJECT_ID }}
          export_default_credentials: true
      - name: Configure Docker Client
        run: |-
          gcloud auth configure-docker --quiet
          gcloud auth configure-docker \
              us-docker.pkg.dev --quiet
      - name: Push Docker image to GCR (Google Container Registry)
        run: |-
          docker tag ${{ env.IMAGE }}:latest gcr.io/$PROJECT_ID/$IMAGE_NAME:latest
          docker tag ${{ env.IMAGE }}:latest gcr.io/$PROJECT_ID/$IMAGE_NAME:${{ env.GIT_TAG }}
          docker push gcr.io/$PROJECT_ID/$IMAGE_NAME:latest
          docker push gcr.io/$PROJECT_ID/$IMAGE_NAME:${{ env.GIT_TAG }}
      - name: Push Docker image to Artifact Registry (Google Artifact Registry)
        run: |-
          docker tag ${{ env.IMAGE }}:latest us-docker.pkg.dev/$PROJECT_ID/$IMAGE_NAME:latest
          docker tag ${{ env.IMAGE }}:latest us-docker.pkg.dev/$PROJECT_ID/$IMAGE_NAME:${{ env.GIT_TAG }}
          docker push us-docker.pkg.dev/$PROJECT_ID/$IMAGE_NAME:latest
          docker push us-docker.pkg.dev/$PROJECT_ID/$IMAGE_NAME:${{ env.GIT_TAG }}
          

